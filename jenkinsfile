pipeline {
    agent {label 'master'}

    stages {
        stage('GetCode') {
            steps {
               git branch: 'feature_fix_coverage', url: 'https://github.com/Trophicdiamond/unir.git'
            }
        }


            
                stage('Unit') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh '''
                            python3 -m coverage run --branch --source=app --omit=app//__init__.py,app//api.py -m pytest --junitxml=result-unit.xml test//unit
                            python3 -m coverage xml
                            '''
                            junit 'result-unit.xml'
                        }
                    }
                }

                stage('Rest') {
                    steps{
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){

                            sh '''
                                export FLASK_APP="${WORKSPACE}/app/api.py"
                                flask run &
                                java -jar '/var/lib/jenkins/wiremock/wiremock-standalone-3.10.0.jar' --port 9090 --root-dir '/var/lib/jenkins/wiremock/mappings/' &
                                sleep 10
                                export PYTHONPATH="${WORKSPACE}"
                                pytest --junitxml=result-rest.xml test/rest
                            '''
                        }
                    }
                }
                
                stage('Static') {
                    steps{
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                        
                        sh '''
                            python3 -m flake8 --exit-zero --format=pylint app>flake8.out
                        '''
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                        }
                    }
                }
                
                stage('Security Test') {
                    steps{
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                        
                        sh '''
                            bandit -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}" || true
                        '''
                        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable:true], [threshold: 4, type: 'TOTAL', unstable: false]]

                        }
                    }
                }
                
                stage('Coverture') {
                    steps{
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            
                            sh 'python3 -m coverage report'
                            
                            cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100,80,90', lineCoverageTargets: '100,85,95', onlyStable: 'false'
                            
                        }
                    }
                }
                
                stage('Performance') {
                    steps{
                        sh'''
                        /var/lib/jenkins/workspace/Entregables/CasoPractico1.2/apache-jmeter-5.6.3/bin/jmeter.sh -n -t /var/lib/jenkins/workspace/Entregables/CasoPractico1.2/CasoPractico.jmx -f -l CasoPractico.jtl
                        '''
                        perfReport sourceDataFiles: '/var/lib/jenkins/workspace/Entregables/CasoPractico1.2/CasoPractico.jtl'
                    }
                }
    }
}
