pipeline {
    agent none
    stages {
        stage('GetCode') {
            agent {label 'master'}
            steps {
                sh '''
                ls -la
                whoami
                hostname
                '''
                echo "${WORKSPACE}"
                git 'https://github.com/Trophicdiamond/unir.git'
                stash name: 'gitcode', includes: '**/*'
                stash name: 'cobertura', includes: 'CasoPractico.jmx'
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit') {
                    agent {label 'agente1'}
                    steps {
                        sh '''
                        ls -la
                        whoami
                        hostname
                        '''
                        echo "${WORKSPACE}"
                        unstash 'gitcode'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh '''
                            python3 -m coverage run --branch --source=app --omit=app//__init__.py,app//api.py -m pytest --junitxml=result-unit.xml test/unit
                            '''
                        junit 'result-unit.xml'
                        }
                    }
                }

                stage('Rest') {
                    agent {label 'agente2'}
                    steps{
                        sh '''
                        ls -la
                        whoami
                        hostname
                        '''
                        echo "${WORKSPACE}"
                        unstash 'gitcode'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh '''
                                export FLASK_APP="${WORKSPACE}/app/api.py"
                                flask run &
                                java -jar '/home/agente2/jenkins/wiremock/wiremock-standalone-3.10.0.jar' --port 9090 --root-dir '/home/agente2/jenkins/wiremock/' &
                                sleep 10
                                export PYTHONPATH="${WORKSPACE}"
                                pytest --junitxml=result-rest.xml test/rest
                            '''
                        }
                    }
                }

                stage('Static') {
                    agent {label 'agente1'}
                    steps{
                        sh '''
                        sleep 10
                        ls -la
                        whoami
                        hostname
                        '''
                        echo "${WORKSPACE}"
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh '''
                                python3 -m flake8 --exit-zero --format=pylint app>flake8.out
                            '''
                        }
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                    }
                }

                stage('Security Test') {
                    agent {label 'agente2'}
                    steps{
                        sh '''
                        ls -la
                        whoami
                        hostname
                        '''
                        echo "${WORKSPACE}"
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh '''
                                bandit -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}" || true
                            '''
                        }
                        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable:true], [threshold: 4, type: 'TOTAL', unstable: false]]
                    }
                }

                stage('Coverture') {
                    agent {label 'agente1'}
                    steps {
                        sh '''
                        ls -la
                        whoami
                        hostname
                        '''
                        echo "${WORKSPACE}"
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh '''
                            python3 -m coverage xml
                            '''
                        cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100,80,90', lineCoverageTargets: '100,85,95', onlyStable: 'false'
                        }
                    }
                }


                stage('Performance') {
                    agent {label 'agente2'}
                    steps {
                        sh '''
                        ls -la
                        whoami
                        hostname
                        '''
                        echo "${WORKSPACE}"
                        unstash 'cobertura'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh '''
                            export FLASK_APP="${WORKSPACE}/app/api.py"
                            flask run &
                            /home/agente2/apache-jmeter-5.6.3/bin/jmeter.sh -n -t CasoPractico.jmx -f -l CasoPractico.jtl
                            '''

                        perfReport sourceDataFiles: 'CasoPractico.jtl'
                        }
                    }
                }
            }
        }

        stage('CleanAgents') {
            parallel {
                stage('Clean1') {
                    agent {label 'agente1'}
                    steps {
                        sh '''
                        ls -la
                        whoami
                        hostname
                        '''
                        deleteDir()
                    }
                }
                stage('Clean2') {
                    agent {label 'agente2'}
                    steps{
                        sh '''
                        ls -la
                        whoami
                        hostname
                        '''
                        deleteDir()
                    }
                }
            }
        }
   }
}
